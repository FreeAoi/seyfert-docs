---
import { flattenSidebar, type SidebarEntry } from '../lib/utils/navigation';
import { Icon } from '@astrojs/starlight/components';
import Badge from './badge.astro';

interface Props {
  sublist: SidebarEntry[];
  nested?: boolean;
}

const { sublist, nested } = Astro.props;
const arr = [
  'api/functions',
  'api/variables',
  'api/type-aliases',
  'api/classes',
  'api/enumerations',
  'api/interfaces',
];
---

<ul class:list={{ 'top-level': !nested }}>
  {
    sublist.map((entry) => {
      if (entry.type === 'link' && arr.some((i) => entry.href.includes(i))) {
        // I think there is a better way to do is
        // but idk xd
        const svgType = {
          functions: () => (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              class="text-red-500 size-5"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <rect width="18" height="18" x="3" y="3" rx="2" ry="2" />
              <path d="M9 17c2 0 2.8-1 2.8-2.8V10c0-2 1-3.3 3.2-3" />
              <path d="M9 11.2h5.7" />
            </svg>
          ),
          variables: () => (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              class="text-indigo-600 size-5"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
            >
              <path d="M8 21s-4-3-4-9 4-9 4-9" />
              <path d="M16 3s4 3 4 9-4 9-4 9" />
              <line x1="15" x2="9" y1="9" y2="15" />
              <line x1="9" x2="15" y1="9" y2="15" />
            </svg>
          ),
          'type-aliases': () => (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="text-yellow-300 size-5"
            >
              <>
                <rect width="8" height="4" x="8" y="2" rx="1" ry="1" />
                <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" />
                <path d="M9 12v-1h6v1" />
                <path d="M11 17h2" />
                <path d="M12 11v6" />
              </>
            </svg>
          ),
          classes: () => (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="text-green-500 size-5"
            >
              <>
                <path d="M2.97 12.92A2 2 0 0 0 2 14.63v3.24a2 2 0 0 0 .97 1.71l3 1.8a2 2 0 0 0 2.06 0L12 19v-5.5l-5-3-4.03 2.42Z" />
                <path d="m7 16.5-4.74-2.85" />
                <path d="m7 16.5 5-3" />
                <path d="M7 16.5v5.17" />
                <path d="M12 13.5V19l3.97 2.38a2 2 0 0 0 2.06 0l3-1.8a2 2 0 0 0 .97-1.71v-3.24a2 2 0 0 0-.97-1.71L17 10.5l-5 3Z" />
                <path d="m17 16.5-5-3" />
                <path d="m17 16.5 4.74-2.85" />
                <path d="M17 16.5v5.17" />
                <path d="M7.97 4.42A2 2 0 0 0 7 6.13v4.37l5 3 5-3V6.13a2 2 0 0 0-.97-1.71l-3-1.8a2 2 0 0 0-2.06 0l-3 1.8Z" />
                <path d="M12 8 7.26 5.15" />
                <path d="m12 8 4.74-2.85" />
                <path d="M12 13.5V8" />
              </>
            </svg>
          ),
          enumerations: () => (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="text-blue-500 size-5"
            >
              <>
                <rect width="18" height="18" x="3" y="3" rx="2" />
                <path d="M16 8.9V7H8l4 5-4 5h8v-1.9" />
              </>
            </svg>
          ),
          interfaces: () => (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="text-violet-500 size-5"
            >
              <>
                <line x1="19" x2="10" y1="4" y2="4" />
                <line x1="14" x2="5" y1="20" y2="20" />
                <line x1="15" x2="9" y1="4" y2="20" />
              </>
            </svg>
          ),
        };

        return (
          <li>
            <a
              href={entry.href}
              class:list={[
                entry.attrs.class,
                entry.isCurrent
                  ? 'text-[#364bff] dark:text-[#b3c7ff] bg-zinc-200 dark:bg-zinc-900 font-semibold'
                  : 'text-black dark:text-white',
              ]}
              {...entry.attrs}
            >
              <div class="flex items-center gap-2">
                {svgType[
                  entry.href.split('/')[
                    entry.href.startsWith('/api') ? 2 : 3
                  ] as keyof typeof svgType
                ]()}
                <span class="truncate">{entry.label}</span>
              </div>
              {entry.badge && (
                <>
                  {' '}
                  <Badge
                    text={entry.badge.text}
                    variant={entry.isCurrent ? 'outline' : entry.badge.variant}
                  />
                </>
              )}
            </a>
          </li>
        );
      }

      return (
        <li>
          {entry.type === 'link' ? (
            <a
              href={entry.href}
              class:list={[
                entry.attrs.class,
                entry.isCurrent
                  ? 'text-[#364bff] dark:text-[#b3c7ff] bg-zinc-200 dark:bg-zinc-900 font-semibold'
                  : 'text-black dark:text-white',
              ]}
              {...entry.attrs}
            >
              <span>{entry.label}</span>
              {entry.badge && (
                <>
                  {' '}
                  <Badge
                    text={entry.badge.text}
                    variant={entry.isCurrent ? 'outline' : entry.badge.variant}
                  />
                </>
              )}
            </a>
          ) : (
            <details
              open={
                flattenSidebar(entry.entries).some((i) => i.isCurrent) ||
                !entry.collapsed
              }
            >
              <summary>
                <div class="group-label">
                  <span class="large">{entry.label}</span>
                  {entry.badge && (
                    <>
                      {' '}
                      <Badge
                        text={entry.badge.text}
                        variant={entry.badge.variant}
                      />
                    </>
                  )}
                </div>
                <Icon name="right-caret" class="caret" size="1.25rem" />
              </summary>
              <Astro.self sublist={entry.entries} nested />
            </details>
          )}
        </li>
      );
    })
  }
</ul>

<style>
  ul {
    --sl-sidebar-item-padding-inline: 0.5rem;
    list-style: none;
    padding: 0;
  }

  li {
    overflow-wrap: anywhere;
  }

  ul ul li {
    margin-inline-start: var(--sl-sidebar-item-padding-inline);
    border-inline-start: 1px solid var(--sl-color-hairline-light);
    padding-inline-start: var(--sl-sidebar-item-padding-inline);
  }

  .large {
    font-size: var(--sl-text-lg);
    font-weight: 600;
    color: var(--sl-color-white);
  }

  .top-level > li + li {
    margin-top: 0.75rem;
  }

  summary {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.2em var(--sl-sidebar-item-padding-inline);
    line-height: 1.4;
    cursor: pointer;
    user-select: none;
  }
  summary::marker,
  summary::-webkit-details-marker {
    display: none;
  }

  .caret {
    transition: transform 0.2s ease-in-out;
    flex-shrink: 0;
  }
  :global([dir='rtl']) .caret {
    transform: rotateZ(180deg);
  }
  [open] > summary .caret {
    transform: rotateZ(90deg);
  }

  a {
    display: block;
    border-radius: 0.25rem;
    text-decoration: none;
    color: var(--sl-color-gray-2);
    padding: 0.3em var(--sl-sidebar-item-padding-inline);
    line-height: 1.4;
  }

  a:hover,
  a:focus {
    color: var(--sl-color-text-accent);
  }

  [aria-current='page'],
  [aria-current='page']:hover,
  [aria-current='page']:focus {
    font-weight: 600;
    color: var(--sl-color-text-accent);
    background-color: var(--sl-color-text-accent);
  }

  a > *:not(:last-child),
  .group-label > *:not(:last-child) {
    margin-inline-end: 0.25em;
  }

  @media (min-width: 50rem) {
    .top-level > li + li {
      margin-top: 0.5rem;
    }
    .large {
      font-size: var(--sl-text-base);
    }
    a {
      font-size: var(--sl-text-sm);
    }
  }
</style>
